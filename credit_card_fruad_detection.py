# -*- coding: utf-8 -*-
"""credit card fruad detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YFsVtxD0m72sqnYgt9-DC5LPZBFyCRL_
"""

import numpy as np

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

dataset = pd.read_csv('/content/drive/MyDrive/creditcard.csv')

dataset.head()

dataset.tail()mo

dataset.info()

dataset.isnull().sum()

dataset['Class'].value_counts()

"""This Dateset is highly imbalanced"""

#seperating the data for analysis
legit = dataset[dataset['Class'] == 0]
fruad = dataset[dataset['Class'] == 1]

print(legit.shape)

print(fruad.shape)

"""**StTISTICAL MEASURE OF THE DATA**"""

legit.Amount.describe()

fruad.Amount.describe()

"""**Comparing the values for each** **transaction**"""

dataset.groupby('Class').mean()

"""**Undersampling**
building the simple dataset containing similar distribution of normal transations and froud transactions
"""

#no of froudakland transactions = 492
legit_sample = legit.sample(n=492)

"""**concatinatinating two data** **frames**"""

new_dataset = pd.concat([legit_sample, fruad], axis=0)

new_dataset

new_dataset.tail()

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

#splitting the data into features and targets
X = new_dataset.drop(columns='Class', axis=1)
Y = new_dataset['Class']

X

"""**Splitting The data into training and testing Data**"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_test.shape,  X_train.shape)

#Model Training
model = LogisticRegression()

#training the logistic regression model with training data
model.fit(X_train, Y_train)

"""**Model Evaluation**"""

#Accuracy Score
#Accuracy on traing Data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data :', training_data_accuracy)

#Accuracy on Test Data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on training data :', test_data_accuracy)